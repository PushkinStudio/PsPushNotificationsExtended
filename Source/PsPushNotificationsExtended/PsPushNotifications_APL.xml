<?xml version="1.0" encoding="utf-8"?>
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<trace enable="true"/>

	<androidManifestUpdates>
		<addPermission android:name="android.permission.INTERNET"/>
		<addPermission android:name="android.permission.ACCESS_NOTIFICATION_POLICY"/>

		<setElement result="IntentAction" value="action"/>
		<addAttribute tag="$IntentAction" name="android:name" value="com.my.PsLocalNotificationsExtendedActionReceiver.Broadcast" />

		<setElement result="IntentCategory" value="category"/>
		<addAttribute tag="$IntentCategory" name="android:name" value="android.intent.category.DEFAULT" />

		<setElement result="IntentFilterElement" value="intent-filter"/>
		<addElement tag="$IntentFilterElement" name="IntentAction" />
		<addElement tag="$IntentFilterElement" name="IntentCategory" />

		<setElement result="PsLocalNotificationsExtendedReceiver" value="receiver" />
		<addAttribute tag="$PsLocalNotificationsExtendedReceiver" name="android:name" value="com.epicgames.ue4.PsLocalNotificationsExtendedReceiver" />
		<addAttribute tag="$PsLocalNotificationsExtendedReceiver" name="android:exported" value="true" />
		<addElement tag="$PsLocalNotificationsExtendedReceiver" name="IntentFilterElement" />
		<addElement tag="application" name="PsLocalNotificationsExtendedReceiver" />

		<setElement result="IntentAction2" value="action"/>
		<addAttribute tag="$IntentAction2" name="android:name" value="com.my.PsLocalNotificationsExtendedActionReceiver.Broadcast" />

		<setElement result="IntentCategory2" value="category"/>
		<addAttribute tag="$IntentCategory2" name="android:name" value="android.intent.category.CATEGORY_LAUNCHER" />

		<setElement result="IntentFilterElement2" value="intent-filter"/>
		<addElement tag="$IntentFilterElement2" name="IntentAction2" />
		<addElement tag="$IntentFilterElement2" name="IntentCategory2" />

		<setElement result="PsLocalNotificationsExtendedActionReceiver" value="receiver" />
		<addAttribute tag="$PsLocalNotificationsExtendedActionReceiver" name="android:name" value="com.epicgames.ue4.PsLocalNotificationsExtendedActionReceiver" />
		<addAttribute tag="$PsLocalNotificationsExtendedActionReceiver" name="android:exported" value="true" />
		<addElement tag="$PsLocalNotificationsExtendedActionReceiver" name="IntentFilterElement2" />
		<addElement tag="application" name="PsLocalNotificationsExtendedActionReceiver" />

	</androidManifestUpdates>

	<prebuildCopies>
		<copyFile src="$S(PluginDir)/Java/PsLocalNotificationsExtendedReceiver.java" dst="$S(BuildDir)/src/com/epicgames/ue4/PsLocalNotificationsExtendedReceiver.java" />
		<copyFile src="$S(PluginDir)/Java/PsLocalNotificationsExtendedActionReceiver.java" dst="$S(BuildDir)/src/com/epicgames/ue4/PsLocalNotificationsExtendedActionReceiver.java" />
	</prebuildCopies>

	<gameActivityImportAdditions>
		<insert>
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.Map;

			import android.util.Log;
			import android.app.NotificationManager;
			import android.app.NotificationChannel;

			import android.graphics.Bitmap;
			import android.graphics.BitmapFactory;
			import java.io.FileOutputStream;
		</insert>
	</gameActivityImportAdditions>

	<proguardAdditions>
		<insert>
			-keep class com.epicgames.ue4.PsLocalNotificationsExtendedReceiver {
				public *;
			}
			-keep class com.epicgames.ue4.PsLocalNotificationsExtendedActionReceiver {
				public *;
			}
		</insert>
	</proguardAdditions>

	<gameActivityClassAdditions>
		<insert>

			public static final String PS_PUSH_NOTIFICATIONS_CHANNEL_ID = "PS_PUSH_EXTENDED_CHANNEL_01";

			public void PsPushNotificationsExtended_Init(String channelId, String channelName, String channelDescription)
			{
				Intent launchIntent = getIntent();
				if (launchIntent != null)
				{
					Bundle extrasBundle = launchIntent.getExtras();
					if (extrasBundle != null)
					{
						for (String key : extrasBundle.keySet())
						{
							Object value = extrasBundle.get(key);
							if (value != null)
							{
								Log.debug(String.format("Extras: %s %s (%s)", key, value.toString(), value.getClass().getName()));
							}
						}
					}
					try
					{
						PsLocalNotificationLaunchActivationEvent = extrasBundle.get("localNotificationLaunchActivationEvent").toString();
						PsLocalNotificationLaunchAction = extrasBundle.get("localNotificationLaunchActivationAction").toString();
					}
					catch(Exception e)
					{
						PsLocalNotificationLaunchActivationEvent = "";
						PsLocalNotificationLaunchAction = "";
					}
				}

				if (android.os.Build.VERSION.SDK_INT >= 26)
				{
					NotificationManager NotifManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

					String newChannelId = GameActivity.PS_PUSH_NOTIFICATIONS_CHANNEL_ID;
					if (channelId != null &amp;&amp; channelId.length() &gt; 0)
					{
						newChannelId = channelId;
					}

					String newChannelName = "Default";
					if (channelName != null &amp;&amp; channelName.length() &gt; 0)
					{
						newChannelName = channelName;
					}

					int importance = NotificationManager.IMPORTANCE_DEFAULT;

					NotificationChannel notifChannel = new NotificationChannel(newChannelId, channelName, importance);
					notifChannel.setDescription(channelDescription);

					NotifManager.createNotificationChannel(notifChannel);
					Log.debug("PsPushNotificationsExtended::Init: " + newChannelId + " " + channelName);
				}
			}

			public String PsPushNotificationsExtended_LocalNotificationScheduleAtTime(String targetDateTime, boolean localTime, String title, String body, String action, String activationEvent, String categoryId, String contentURL, boolean bLocalContent, byte[] localImageData)
			{
				int notificationID = LocalNotificationGetID();

				// Create callback for PendingIntent
				Intent notificationIntent = new Intent(this, PsLocalNotificationsExtendedReceiver.class);

				// Add user-provided data
				notificationIntent.putExtra("local-notification-ID", notificationID);
				notificationIntent.putExtra("local-notification-title", title);
				notificationIntent.putExtra("local-notification-body", body);
				notificationIntent.putExtra("local-notification-action", action);
				notificationIntent.putExtra("local-notification-activationEvent", activationEvent);
				notificationIntent.putExtra("local-notification-contentURL", contentURL);
				notificationIntent.putExtra("local-notification-localContent", bLocalContent);

				if (bLocalContent)
				{
					File outputDir = getCacheDir();
					String absFilePath = outputDir.getAbsolutePath() + "/" + contentURL;
					File file = new File(absFilePath);
					if (!file.exists())
					{
						Bitmap bmp = BitmapFactory.decodeByteArray(localImageData, 0, localImageData.length);
						try (FileOutputStream out = new FileOutputStream(absFilePath))
						{
							bmp.compress(Bitmap.CompressFormat.PNG, 90, out); // bmp is your Bitmap instance
							Log.debug("PsPushNotificationsExtended::LocalNotificationsScheduleAtTime saved local file: " + absFilePath);
						}
						catch (Exception e)
						{
							e.printStackTrace();
						}
					}
					else
					{
						Log.debug("PsPushNotificationsExtended::LocalNotificationsScheduleAtTime local file already exists: " + absFilePath);
					}
				}

				if (PsPushCategoriesMap != null)
				{
					ArrayList&lt;String&gt; Actions = (ArrayList&lt;String&gt;)PsPushCategoriesMap.get(categoryId);
					if (Actions != null)
					{
						Log.debug("PsPushNotificationsExtended::LocalNotificationsScheduleAtTime Action size: " + Actions.size());
						for (int i = 0; i &lt; Actions.size(); i++)
						{
							String ActionString = (String)Actions.get(i);
							String[] parts = ActionString.split(":");
							if (parts.length &gt; 1)
							{
								String extraTitleTag = "local-notification-cateroty-action-" + i + "-title";
								notificationIntent.putExtra(extraTitleTag, parts[0]);
								String extraIdTag = "local-notification-cateroty-action-" + i + "-id";
								notificationIntent.putExtra(extraIdTag, parts[1]);
								Log.debug("PsPushNotificationsExtended::LocalNotificationsScheduleAtTime Action added: " + parts[0] + " id: " + parts[1]);
							}
						}
					}
				}

				// Designate the callback as a PendingIntent
				PendingIntent pendingIntent = PendingIntent.getBroadcast(this, notificationID, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);

				TimeZone targetTimeZone = TimeZone.getTimeZone("UTC");

				if (localTime)
				{
					targetTimeZone = TimeZone.getDefault();
				}

				DateFormat targetDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				targetDateFormat.setTimeZone(targetTimeZone);

				Date targetDate = new Date();

				try 
				{
					targetDate = targetDateFormat.parse(targetDateTime);
				}
				catch (ParseException e) 
				{
					e.printStackTrace();
					return String.valueOf(0);
				}

				Date currentDate = new Date();

				long msDiff = targetDate.getTime() - currentDate.getTime();

				long futureTimeInMillis = SystemClock.elapsedRealtime() + msDiff;//Calculate the time to run the callback
				AlarmManager alarmManager = (AlarmManager)getSystemService(Context.ALARM_SERVICE);

				//Schedule the operation by using AlarmService
				alarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, futureTimeInMillis, pendingIntent);

				Log.debug("PsPushNotificationsExtended::LocalNotificationsScheduleAtTime: " + targetDateTime + " local: " + localTime + " FT: " + msDiff);

				return String.valueOf(notificationID);
			}

			private String PsLocalNotificationLaunchActivationEvent = "";
			private String PsLocalNotificationLaunchAction = "";

			public static HashMap&lt;String, ArrayList&lt;String&gt;&gt; PsPushCategoriesMap = null;

			public void PsPushNotificationsExtended_LocalNotificationAddCategory(String CategoryId, String ActionName, String ActionId)
			{
				Log.debug("PsPushNotificationsExtended::LocalNotificationAddCategory: " + CategoryId + " Action: " + ActionName + " " + ActionId);
				if (PsPushCategoriesMap == null)
				{
					PsPushCategoriesMap = new HashMap&lt;String, ArrayList&lt;String&gt;&gt;();
				}

				ArrayList&lt;String&gt; Actions = (ArrayList&lt;String&gt;)PsPushCategoriesMap.get(CategoryId);
				String ActionString = ActionName + ":" + ActionId;
				if (Actions != null)
				{
					Actions.add(ActionString);
				}
				else
				{
					Actions = new ArrayList&lt;String&gt;();
					Actions.add(ActionString);
					PsPushCategoriesMap.put(CategoryId, Actions);
				}
			}

			public void PsPushNotificationsExtended_LocalNotificationClearById(String notificationIdStr)
			{
				try
				{
					int notificationId = Integer.parseInt(notificationIdStr);
					AlarmManager alarmManager = (AlarmManager)getSystemService(Context.ALARM_SERVICE);
					PendingIntent pendingIntent = PendingIntent.getBroadcast(this, notificationId, new Intent(this, PsLocalNotificationsExtendedReceiver.class), PendingIntent.FLAG_UPDATE_CURRENT);
					pendingIntent.cancel();
					alarmManager.cancel(pendingIntent);
				}
				catch(Exception e)
				{
					Log.debug("LocalNotificationClearById: " + e.getMessage());
				}
			}

			public void PsPushNotificationsExtended_LocalNotificationClearAll()
			{
				ArrayList&lt;Integer&gt; idList = LocalNotificationGetIDList();

				for (int curID : idList)
				{
					AlarmManager alarmManager = (AlarmManager)getSystemService(Context.ALARM_SERVICE);
					PendingIntent pendingIntent = PendingIntent.getBroadcast(this, curID, new Intent(this, PsLocalNotificationsExtendedReceiver.class), PendingIntent.FLAG_UPDATE_CURRENT);
					pendingIntent.cancel();
					alarmManager.cancel(pendingIntent);
				}
			}

			public void PsPushNotificationsExtended_LocalNotificationClearById(int notificationId)
			{
			}

			public String PsPushNotificationsExtended_LastNotificationActivationCode()
			{
				return PsLocalNotificationLaunchActivationEvent;
			}

			public String PsPushNotificationsExtended_LastNotificationActionId()
			{
				return PsLocalNotificationLaunchAction;
			}

		</insert>
	</gameActivityClassAdditions>

</root>
